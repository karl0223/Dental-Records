# ----------------------------------------------------
#install django on directory
- pipenv install django

# Run pipenv shell
- pipenv shell

# Start django project
- django-admin startproject <appname> .

# ----------------------------------------------------

# Python interpreter using pipenv
- pipenv --venv
- copy the directory to python interpreter (ctrl + shift + p)

# ----------------------------------------------------
# Creating App file
- python manage.py startapp <appname>
- add the app in the main app settings  - IMPORTANT

# ----------------------------------------------------
# Create urls.py and views
- create a view in views.py
- create url pattern (check the playground urls.py)
- add the playground urls in the urls of the main app -> (dentalclinic)

# Creating templates
- create a templates folder
- create html file
- render the html file

# ----------------------------------------------------
#Installing django debug toolbar
- pipenv install django-debug-toolbar
- add 'debug_toolbar' in settings
- add the debug pattern in urls.py in main app
- add the middleware
- add the Internal IPS in the settings
- It must be a proper html file for the debug tool to work

# ----------------------------------------------------
# Designing the Database models
- python manage.py startapp <appname>  -- Create an app to store the models (Minimal coupling, high cohesion)
- Choice Fields
- Defining One-to-one Relationships 
- Defining a One-to-many Relationship 
- Defining Many-to-many Relationships 
- Resolving Circular Relationships
- Generic Relationships (contenttypes)

# -----------------------------------------------------
# Install and connect Django and Mysql
- pipenv install mysqlclient
- Go to databases in settings
- change values 

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dental',
        'HOST': 'localhost',
        'USER': 'root',
        'PASSWORD': 'karl0223'
    }
}

- check if there's an error, and if not run a migration
- python manage.py migrate

# -----------------------------------------------------
# Django ORM
- managers and query set -- query_set = DB.objects.all()
- retrieving data  -- .all(), .get(), .filter() etc.
- for filtering data, search query set api reference in django documentation. 
- Check field lookups, lookup types. (e.g .filter(title__contains="karl"))

# Complex Lookups Using Q Objects. 
- from django.db.models import Q
- .filter(Q(unit_price__gt=10) | Q(unit_price__lt=20)) combine two queries

# Referencing Fields using F Objects
- from django.db.models import Fields
- .filter(F('unit_price'))
- can filter different collection with lookups. (e.g. .filter('collection__id')) 

# ------------------------------------------------------
# Selecting related objects/fields
- select_related('collection_someField') -- only use if the field has one instance
- prefetch_related('promotion') -- use if there's multiple instances
- it can also be chained. Collection.objects.prefetch_related('').select_related('')