# ----------------------------------------------------
#install django on directory
- pipenv install django

# Run pipenv shell
- pipenv shell

# Start django project
- django-admin startproject <appname> .

# ----------------------------------------------------

# Python interpreter using pipenv
- pipenv --venv
- copy the directory to python interpreter (ctrl + shift + p)

# ----------------------------------------------------
# Creating App file
- python manage.py startapp <appname>
- add the app in the main app settings  - IMPORTANT

# ----------------------------------------------------
# Create urls.py and views
- create a view in views.py
- create url pattern (check the playground urls.py)
- add the playground urls in the urls of the main app -> (dentalclinic)

# Creating templates
- create a templates folder
- create html file
- render the html file

# ----------------------------------------------------
#Installing django debug toolbar
- pipenv install django-debug-toolbar
- add 'debug_toolbar' in settings
- add the debug pattern in urls.py in main app
- add the middleware
- add the Internal IPS in the settings
- It must be a proper html file for the debug tool to work

# ----------------------------------------------------
# Designing the Database models
- python manage.py startapp <appname>  -- Create an app to store the models (Minimal coupling, high cohesion)
- Choice Fields
- Defining One-to-one Relationships 
- Defining a One-to-many Relationship 
- Defining Many-to-many Relationships 
- Resolving Circular Relationships
- Generic Relationships (contenttypes)

# -----------------------------------------------------
# Install and connect Django and Mysql
- pipenv install mysqlclient
- Go to databases in settings
- change values 

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dental',
        'HOST': 'localhost',
        'USER': 'root',
        'PASSWORD': 'karl0223'
    }
}

- check if there's an error, and if not run a migration
- python manage.py migrate

# -----------------------------------------------------
# Django ORM
- managers and query set -- query_set = DB.objects.all()
- retrieving data  -- .all(), .get(), .filter() etc.
- for filtering data, search query set api reference in django documentation. 
- Check field lookups, lookup types. (e.g .filter(title__contains="karl"))

# Complex Lookups Using Q Objects. 
- from django.db.models import Q
- .filter(Q(unit_price__gt=10) | Q(unit_price__lt=20)) combine two queries

# Referencing Fields using F Objects
- from django.db.models import F
- .filter(F('unit_price'))
- can filter different collection with lookups. (e.g. .filter('collection__id')) 

# ------------------------------------------------------
# Selecting related objects/fields
- select_related('collection_someField') -- only use if the field has one instance
- prefetch_related('promotion') -- use if there's multiple instances
- it can also be chained. Collection.objects.prefetch_related('').select_related('')

# ------------------------------------------------------
# Aggregates
- from django.db.models.aggregates import Count, Max, Min, Avg, Sum
- Product.objects.aggregates(count=Count('id'), min_price=Min('unit_price))

# ------------------------------------------------------
# Annotate - create a new column with the result of query
- from django.db.models import Value, F
- query_set = Customer.objects.annotate(new_id=Value(True)) -- annotate can only accept expression objects. use Value() 
- query_set = Customer.objects.annotate(new_id=F('id')) -- creating a new id column with the value of F('id')

# ------------------------------------------------------
# Calling Database Functions
- from django.db.models import Func, F, Value
- query_set = Customer.objects.annotate(full_name=Func(F('first_name'), Value(' '), F(''last_name), function='CONCAT'))
- search django database functions for more information

# ------------------------------------------------------
# Grouping Data
- from django.db.models import Count
- query_set = Customer.objects.annotate(orders_count=Count('field_name')) #e.g order

# ------------------------------------------------------
# Expression Wrapper
- from django.db.models import ExpressionWrapper, F
- discounted_price = ExpressionWrapper(F('unit_price') * 0.8, output_field=DecimalField())
- query_set = Product.objects.annotate(discounted_price=discounted_price)
- can be use to create a calculated column. e.g. discounted_price in the query_set

# ------------------------------------------------------
# Custom Manager
- Used to overide the existing manager function
- class TaggedItemManager(models.Manager):
    def get_tags_for(self, obj_type, obj_id):
        ...
- add objects field in the original class model. -- objects = TaggedItemManager()
- You can now use the custom manager -- TaggedItem.objects.get_tags_for(obj_type, obj_id)
- check storefront 2 or 3 for more details

# ------------------------------------------------------
# Query Set Caching
- only happens when evaluate the entire query first
- database optimization
# Correct Implementation
- queryset = Product.objects.all()
- queryset[0]
# Incorrect Implementation
- queryset[0]
- queryset = Product.objects.all()

# ------------------------------------------------------
# Creating Objects
# Traditional Approach
- collection.title = 'Hello'
- collection.save()
- recommended by mosh because the field will be renamed if the field in the class model changed
# Shorthand
- collection = Collection.objects.create(title="Hello")
- the kwargs will not be changed

# ------------------------------------------------------
# Updating Objects
# Read the object first before updating to avoid data loss
# Not reading the object first after updating will result empty data. e.g Updating only one field, the other field will be set to empty
- collection = Collection.objects.get(pk=11)
- collection.featured_product=None
- collection.save()
# If you encounter a performance problem when updating you can use the built in update manager
- Collection.objects.filter(pk=11).update(featured_product=None)

# ------------------------------------------------------
# Delete Objects
# Deleting single object
- collection = Collection(pk=11)
- collection.delete()
# Deleting Multiple objects
- Collection.objects.filter(id__gt=5).delete()

# ------------------------------------------------------
# Transactions
# If one changes fails, all changes will be rolled back
- from djang.db import transaction
# wrap the fuction with transaction decorator 
- @transaction.atomic()
    def something():
    ...
# use transaction as context manage to have more control
- def something():
    ...
    with transaction.atomic():
        ...

# ------------------------------------------------------
# Executing Raw SQL queries
# Using .raw()
- queryset = Product.objects.raw('SELECT *from store_product')
# Using Cursor
# executing queries that dont map in the model object, bypassing the model layer
- from django.db import connection
# First Implementation
- cursor = connection.cursor()
- cursor.execute(query)
- cursor.close()
- wrap it with try and catch block
# Second Implementation
- with connection.cursor() as cursor:
    cursor.execute(query)
    # executing store procedures
    cursor.callproc('get_customers', [1, 2, 'a'])

# ------------------------------------------------------
# Setting up Admin Site
- run the server
- python manage.py createsuperuser -- create admin USER
- python manage,py changeoassword admin -- change password
- route: localhost/admin
# Go to main app -- dentalclinic > urls.py > modify the admin page by accessing the admin
- admin.site.site_header = "Dental Clinic"

# ------------------------------------------------------
# Registering the Models
- Go to the apps e.g clinic > admin
- from . import models
- admin.site.register(models.Package) -- Register the model
- Change the title/fields of the packages using __str__ method
- def __str__(self) -> str:
        return self.title
# Sort the data by its title
- class Meta:
        ordering = ['title']

# ------------------------------------------------------
# Customizing the list page
- use the admin register decorator
- inherit the admin.ModelAdmin to the class
- list_display -- list of columns to display
- list_editable -- used to edit values. e.g price 
- list_per_page -- simple pagination
- search django model admin options for more information

# ------------------------------------------------------
# Make balance in payment record auto calculate
# Check changes in models (patient, payment record etc)
# In payment record model
- def save(self, *args, **kwargs):
        # Calculate the balance based on the amount and the package price
        if self.package:
            self.balance = self.package.price - self.amount
        super().save(*args, **kwargs)
- check admin payment record and payment record model

# In admin payment record
@admin.register(models.PaymentRecord)
- class PaymentRecordAdmin(admin.ModelAdmin):
    readonly_fields = ['balance']
    list_display = ['patient', 'display_package', 'display_package_price','balance', 'payment_details', 'amount', 'last_update']
    ordering = ['last_update']
    list_per_page = 10

    # make a new column with the function return value
    def display_package(self, obj):
        return obj.patient.package.title if obj.patient.package else None

    def display_package_price(self, obj):
        return obj.patient.package.price if obj.patient.package else None

    display_package.short_description = 'Package'

    display_package_price.short_description = 'Package Price'

# To sort auto calculate column e.g The column stock has indicator 'low' (string) but has value in the db (stock = 3 which is less than 10 so it will display low)
- if stock < 10:
    return low
  return high
- Use @admin.display(ordering='stock') as decorator
- @admin.display(ordering='stock')
   def something(self, variable):
       ...
        
# ------------------------------------------------------
# Selecting Related Object
- use to load related objects
- list_select_related = ['ForeignKey']

- @admin.register(models.Address)
class AddressAdmin(admin.ModelAdmin):
    list_display = ['branch', 'street', 'city']
    ordering = ['street', 'city']
    list_per_page = 10
    list_select_related = ['branch']

# ------------------------------------------------------
# Overiding the base query set
- lesson 70 code with mosh django part 1
- e.g creating a new column based on the count of products (product_count)
- def get_queryset(self, request):
     return super().get_queryset(request).annotate(product_count=Count('product'))

# Use @admin.display(ordering='') to sort the column

# ------------------------------------------------------
# Providing links to other pages  -- REFERENCE storefront CollectionAdmin product_count
- from django.utils.html import format_html, urlencode
- format_html('<a href="{}">{}</a>', url, collection)

# To get the url of the page
- from django.urls import reverse
- format of the reverse func -- reverse('admin:app_model_page')
- url = reverse('admin:store_product_changelist') -- the list of product is named 'changelist' -> page

# To get the collection id dynamically
- url = reverse('admin:store_product_changelist') + '?' + urlencode({ 'collection__id': str(collection.id) })
    return format_html('<a href="{}">{}</a>', url, collection)

# ------------------------------------------------------
# Adding search in the list page
- search_filed = ['field_name__istartswith'] # you can add lookup types after double underscore -- adding 'i' will make it case insensitive

# ------------------------------------------------------
# Filtering the list page
- list_filter = ['field_name']

# Creating custom filter
- create a class e.g class PackageFilter(admin.SimpleListFilter):
- add a title and parameter field
- It requires two methods to implement. First is the lookup, second is the queryset
- lookups returns a tuple
- check the PackageFilter for the implementation

# ------------------------------------------------------
# Creating a custom action
- Check PackageAdmin for the implementation

# Change the package price to 50k
- actions = ['price_50k']
- @admin.action(description='Change price to 50k')
    def price_50k(self, request, queryset):
        updated_price = queryset.update(price=50000)
        self.message_user(request, f'{updated_price} package were successfully updated.')

- import messages to have a custom message indicator 
- from django.contrib import admin, messages
- self.message_user(request, f'{updated_price} package were successfully updated.', messages.ERROR) -- Third parameter
# ------------------------------------------------------
