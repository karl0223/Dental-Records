# -------------------------------------------------

# UPLOADING FILES
- create a media folder

# In settings.py
- add the MEDIA_URL
- add the MEDIA_ROOT
- import os
- BASE_DIR -- current directory

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')    # location where media is stored

# In urls.py (main app -- dental clinic)

- import settings, static

- from django.conf import settings
- from django.conf.urls.static import static
- concatinate the static() in the urlpatterns if in DEBUG mode (Better implementation and will not clash in production)
- static(MEDIA_URL, MEDIA_ROOT)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('playground/', include('playground.urls')), # /playground/
    path('clinic/', include('clinic.urls')), # /clinic/
    path('auth/', include('djoser.urls')),
    path('auth/', include('djoser.urls.jwt')),
    path('__debug__/', include(debug_toolbar.urls))
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# ACCESS THE IMAGE

- http://127.0.0.1:8000/media/dog.jpg

# -------------------------------------------------

# UPLOADING FILES OR IMAGES WITH MODEL

# Install Dependencies
- pipenv install pillow

# CREATE A MODEL CLASS
- create a model class than can receive files or Images
- models.ImageField()         ---- Used for serving image file      # jpg, png, etc
- models.FileField()          ---- Used for serving file field      # doc, pdf, etc
- upload_to=''                ---- Path where the image/file will be stored

# Note: The directory will be in the media folder (MEDIA_ROOT) and it will create a folder clinc/images

class PatientProfileImage(models.Model):
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='profile_image')
    image = models.ImageField(upload_to='clinic/images')

# Migrate
- after creating the model, run makemigrations and migrate

# -------------------------------------------------

# BUILDING AN API TO UPLOAD IMAGES

# SERIALIZERS
- create a serializer
- overwrite the create method to create a patient profile image with dynamic patient id provided in the url   #Note: CHECK VIEWS
- get the patient id in the self.context
- unpack the validated_data

class PatientProfileImageSerializer(serializers.ModelSerializer):
    def create(self, validated_data):
        patient_id = self.context['patient_id']
        return PatientProfileImage.objects.create(patient_id=patient_id, **validated_data)

    class Meta:
        model = PatientProfileImage
        fields = ['id', 'image']

# VIEWS
- create a views

- create a custom serializer context to get the dynamic patient id in the url        #/patient/1(patient_id)/images/
- create a custom serializer context first before getting the self.context[field] in the serializer
- {'patient_id': self.kwargs['patient_pk']}

- create a custom queryset to get the specific patient image
- self.kwargs['patient_pk']             --- Get the patient id in the route. Note: Nested route:  '/patient/1{patient_pk}/images/1{pk}'

class PatientProfileImageViewSet(ModelViewSet):
    serializer_class = PatientProfileImageSerializer

    def get_serializer_context(self):
        return {'patient_id': self.kwargs['patient_pk']}

    def get_queryset(self):
        return PatientProfileImage.objects.filter(patient_id=self.kwargs['patient_pk'])

# URLS
- register the url
- add a basename if the queryset is overwritten
- add the patient_router.urls in the urlpatterns

patient_router = routers.NestedDefaultRouter(router, 'patients', lookup='patient')
patient_router.register('images', views.PatientProfileImageViewSet, basename='patient-images')

urlpatterns = router.urls + branches_router.urls + patient_router.urls

# -------------------------------------------------

# RENDERING THE UPLOADED IMAGE

# SERIALIZERS
- move the PatientProfileImageSerializer above the PatientSerializer
- In the PatientSerializer add the 'profile_image' field. Set 'many' and 'read_only' to 'True'
- In the Meta class fields, add the 'profile_image'

profile_image = PatientProfileImageSerializer(many=True, read_only=True)
fields = ['id', 'user_id', 'first_name', 'last_name', 'phone', 'registration_date', 'branch', 'package', 'current_balance', 'profile_image']


# VIEWS
- check the SQL queries if there's duplicate query
- If there's duplicate query, Use prefetch_related to the queryset

queryset = Patient.objects.prefetch_related('profile_image', 'user').all()

- added 'prefetch_related' in the 'def me' function to load the 'profile_image' and 'user'
(patient, created) = Patient.objects.prefetch_related('profile_image', 'user').get_or_create(user_id=request.user.id)

# -------------------------------------------------

# VALIDATING UPLOADED FILES
- lesson 8
- create a validators.py file

# Validators.py
- import the Validation Error
- create a validation function 

from django.core.exceptions import ValidationError

def validate_file_size(file):
    max_size_kb = 50

    if file.size > max_size_kb * 1024:
        raise ValidationError(f'Files cannot be larget than {max_size_kb}KB!')

# MODELS
- In PatientProfileImage add a validators in the image field

class PatientProfileImage(models.Model):
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='profile_image')
    image = models.ImageField(upload_to='clinic/images', validators=[validate_file_size])

# VALIDATE THE FILE EXTENSION
- Pillow will automatically validate the uploaded image extension
- Useful when restricting File format e.g document, pdf, etc
- import FileExtensionValidator

from django.core.validators import FileExtensionValidator

class PatientProfileImage(models.Model):
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='profile_image')
    file = models.FileField(upload_to='clinic/images', validators=[FileExtensionValidator(allowed_extensions=['pdf])])

# -------------------------------------------------

# ENABLING CORS

- connecting two different apps with different domain/port e.g APP 1: localhost/8000 | APP 2: localhost/8001

# INSTALLING CORS HEADER 
- pipenv install django-cors-headers

# INSTALLED_APPS
- register the cors headers in the installed apps

INSTALLED_APPS = [
    ...,
    "corsheaders",
    ...,
]

# MIDDLEWARE

MIDDLEWARE = [
    ...,
    "corsheaders.middleware.CorsMiddleware",
    ...,
]

# SET CONFIGURATIONS

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8001',
    'http://127.0.0.1:8001'
]

# CONFIGURATIONS AVAILABLE

CORS_ALLOWED_ORIGINS
CORS_ALLOWED_ORIGIN_REGEXES
CORS_ALLOW_ALL_ORIGINS

# -------------------------------------------------

# MANAGING IMAGES IN THE ADMIN
- lesson 11

- create TabularInline in the admin.py
- create a static folder and styles.css
- create an inner class. Media class.
- Use Media class to serve and load static assets on the PatientAdmin (load css or js files)

# ADMIN.PY
- create a TabularInline
- import the format_html to convert string to html code
- from django.utils.html import format_html
- set readonly_fields to thumbnail in PatientImageInline
- create the function to serve the thumbnail. Use the format_html to convert image url
- create a Media class to serve the static assets

class PatientImageInline(admin.TabularInline):
    model = models.PatientProfileImage
    readonly_fields = ['thumbnail']

    def thumbnail(self, instance):
        if instance.image.name != "":
            return format_html(f'<img src="{instance.image.url}" class="thumbnail"/>')
        return ''

class PatientAdmin(admin.ModelAdmin):
    inlines = [PatientImageInline]

    class Media:
        css = {
            'all': ['clinic/styles.css']            # PATH OF THE CSS FILE     # 'all' - affects all html styles, can change per target ('sreens', 'print', etc)
        }


# STATIC FOLDER
- create a static folder in clinic
- name space the files to avoid clash of the same name e.g multiple styles.css files
- create a clinic folder and inside create a style.css file
- static/clinic/styles.css --  PATH

# -------------------------------------------------

# SETTING UP A FAKE SMTP SERVER

- documentation of smtp4dev
- https://github.com/rnwood/smtp4dev
- go to installation page
- run the docker code.
- Note: Download the docker before running the code
- docker run --rm -it -p 3000:80 -p 2525:25 rnwood/smtp4dev

# SMTP4DEV ADMIN PANEL
- localhost:3000

# -------------------------------------------------

# CONFIGURING THE EMAIL BACKEND

# Settings.py

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_HOST_USER = ''                    # leave empty if production. Use .env when production
EMAIL_HOST_PASSWORD = ''                # leave empty if production. Use .env when production
EMAIL_PORT = 2525                       # default smtp port is 25, the fake is 2525
DEFAULT_FROM_EMAIL = 'from@karl.com'

# -------------------------------------------------

# SENDING EMAILS

- lesson 15
- import send_mail, mail_admins, BadHeaderError
- Use try catch to use the BadHeaderError. It is a security measure to modified email attacks
- send_mail('subject', 'message', 'email', ['list of recipients'])                  # Parameters of the send_mail
- the email parameter can be overwritten, the default email is in the settings      --- DEFAULT_FROM_EMAIL = 'from@karl.com'

- go to the playground route to test the email
- http://127.0.0.1:8000/playground/hello/

- check the smtp4dev admin panel to check the email


from django.core.mail import send_mail, mail_admins, BadHeaderError

def say_hello(request):
    try:
        send_mail('subject', 'message', 'from@karl.com', ['from@bob.com'])
    except BadHeaderError:
        pass
    return render(request, 'hello.html', { 'name' : 'Karl'})

# SENDING EMAILS TO SITE ADMINS

- same implementation but use mail_admins
- mail_admins('subject', 'message', html_message="message")

def say_hello(request):
    try:
        mail_admins('subject', 'message', 'from@karl.com', ['from@bob.com'])
    except BadHeaderError:
        pass
    return render(request, 'hello.html', { 'name' : 'Karl'})


# In settings (sending email to site admin only)

ADMINS = [
    ('Karl', 'from@karl.com')   # Tuple --- FORMAT -- (Name : Email)
]

# -------------------------------------------------

# ATTACHING FILES IN EMAILS

# Note: If you want control over the emails sent like attaching file, bcc or cc features, Use 'EmailMessage' instead send_mail

- import EmailMessage
- create a static and images folder in playground 
- static -> images -> dog.jpg

- message = EmailMessage('subject', 'message', 'email', ['list of recipients'])              # Parameters
- message.attach_file(path of the image)
- send the email

from django.core.mail import EmailMessage, BadHeaderError

def say_hello(request):
    try:
        message = EmailMessage('subject', 'message', 'from@karl.com', ['from@bob.com'])
        message.attach_file('playground/static/images/dog.jpg')
        message.send()

    except BadHeaderError:
        pass
    return render(request, 'hello.html', { 'name' : 'Karl'})

# -------------------------------------------------

# SENDING TEMPLATED EMAILS

- pipenv install django-templated-mail

- create email folder and html template file in the template folder

- Use BaseEmailMessage to create the email

# CODE

from templated_mail.mail import BaseEmailMessage

def say_hello(request):
    try:
        message = BaseEmailMessage(
            template_name='emails/hello.html',              # Path of the template
            context={'name': 'Karl'}                        # Variables
        )
        message.send(['karl@from.com'])                     # List of recipients
    except BadHeaderError:
        pass
    return render(request, 'hello.html', { 'name' : 'Karl'})

# -------------------------------------------------

# LONG RUNNING TASKS

- lesson 19

- Processing images and videos
- Generating Reports
- Sending emails
- Running machine learning models

# INTRODUCTION TO CELERY

- start several workers to execute background tasks (long running tasks)
- execute tasks in parallel
- easily scale application by adding more workers
- workers dont impact the main application process. 
- e.g If one of the workers fails, the application process is not affected and it can continue serving clients
- schedule periodic tasks
- communicate with server with queue

# -------------------------------------------------

# MESSAGE BROKER

- Broker = Middleman
- If App-A wants to send a message to App-B, it uses the Message Broker
- If the target application is not available, the broker will keep the message and retry later
- It will guarantee the deliver of messages from A to B
- If the Message Broker becomes unavailable. You can setup a cluster of Message Broker for backup

- 'We use message broker to reliably deliver messages between apps'

# Types of Message Broker

- Redis             # Not real Messsage Broker but a in-memory data store --- can be used as a database, cache, or message broker
- RabbitMQ          # Real, Enterprise-grade broker

# -------------------------------------------------

# INSTALLING REDIS

- lesson 21

- docker run -d -p 6379:6379 redis
- pipenv install redis

# -------------------------------------------------

# INSTALLING CELERY IN WINDOWS

- Check this out
- https://stackoverflow.com/questions/37255548/how-to-run-celery-on-windows

- Install WSL
- pipenv install gevent
- celery -A <module> worker -l info -P gevent

# -------------------------------------------------

# SETTING UP CELERY

- lesson 23

- pipenv install celery

# In the Main app         -- Dental Clinic

- create celery.py

# In celery.py

- import os and celery
- setdefault
- create celery instance
- setup config from object and autodiscover_tasks

import os
from celery import Celery

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dentalclinic.settings')         # django module environment variable - path of the settings

celery = Celery('dentalclinic')
celery.config_from_object('django.conf:settings', namespace='CELERY')               # go to django conf and load the settings
celery.autodiscover_tasks()


# In settings.py
- add the celery broker url and use the redis       # use the port of the redis
- redis://localhost:6379/1                          # redis://localhost/port/database

CELERY_BROKER_URL = 'redis://localhost:6379/1'

# In __init__ of dental clinic
- import celery from celery.py

from .celery import celery


# Run the celery command

- celery -A <module> worker -l info -P gevent

- <module> - Main App --- dentalclinic

- celery -A dentalclinic worker -l info -P gevent

# -------------------------------------------------

# CREATING AND EXECUTING TASKS

- create tasks.py   # Create tasks.py in any app e.g playground

# Simulating simple task
- import sleep
- import shared_task in celery to avoid dependencies

from time import sleep
from celery import shared_task

@shared_task
def notify_customer(message):
    print('Sending 10k emails...')
    print(message)
    sleep(10)
    print('Emails were successfully sent!')

# In Views
- import the notify_customer from tasks
- use .delay

from django.shortcuts import render
from .tasks import notify_customer

def say_hello(request):
    notify_customer.delay('Hello')
   
    return render(request, 'hello.html', { 'name' : 'Karl'})

# Note:
- If you added a new task, re run the celery to load the new tasks/changes
- celery -A dentalclinic worker -l info -P gevent

# -------------------------------------------------

# SCHEDULING PERIODIC TASKS

- lesson 25

- Generating periodic reports
- Sending emails
- Running maintenance jobs

# CELERY BEAT

- task scheduler
- acts as a manager

# SETTING UP CELERY BEAT

- In settings.py
- add celery beat schedule
- import crontab from celery.schedule

from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'notify_customers': {                                                      # Name of the task. Use the function name for consistency
        'task': 'playground.tasks.notify_customers',                           # Path of the tasks
        'schedule': crontab(day_of_week=1, hour=7, minute=30),                 # Use crontab to set schedule
        'args': ['Hello World!'],                                              # any args/kwargs needed       | 'kwargs': {}
    }
}

# RUN THE CELERY BEAT
- celery -A <module> beat
- celery -A dentalclinic beat

# -------------------------------------------------

# MONITORING CELERY TASKS

- pipenv install flower

# RUN THE CODE

- celery -A <module> flower
- celery -A dentalclinic flower

# ACCESS THE FLOWER PANEL

- Go to localhost:5555

# -------------------------------------------------

# AUTOMATED TESTING

- Test the behaviors, Not the implementation

# Sample Scenario

- create a patient
POST / patient

# Scenarios

anonymous -> 401
Non-admin -> 403
Admin & Invalid data -> 400
admin & valid data -> 200

# -------------------------------------------------

# TEST FRAMEWORK

- unittest
- pytest        # more features, tons of plugins, less boilerplate

# INSTALLING PYTEST

- pipenv install --dev pytest               # only dev dependencies
- pipenv install --dev pytest-django        # pytest for django

# -------------------------------------------------

# WRITING TEST CASES

- lesson 31

- create 'tests' folder in the app. Make sure the folder name is 'tests'
- create a test file. Make sure the test file name starts with 'test_'      e.g 'test_patients.py'

# CREATING TEST CASES

        # (A, A, A)     --- Arrange, Act, Assert                    # Triple A

        # Arrange
        - prepare the system under test
        - create objects, prepare database, initial state, etc

        # Act
        - behavior of the test
        - send request to the server

        # Assert
        - expect if the behavior happens or not

# test_packages.py

- import the APIClient and status

from rest_framework.test import APIClient
from rest_framework import status

class TestCreatePackage:                                            # Must start the class name with 'Test' if not pytest will not pick it up
    def test_if_user_is_anonymous_returns_401(self):                # Function must starts with 'test_'. Make it descriptive
        # Arrange 
                - None

        # Act
        client = APIClient()
        response = client.post('/clinic/packages/', {'title': 'a', 'package_type': 'A', 'price': 20000})

        # Assert
        assert response.status_code == status.HTTP_401_UNAUTHORIZED

# -------------------------------------------------

# RUN TEST CASES

-lesson 32

- create 'pytest.ini' in the root folder            # Config file
- run 'pytest' in the terminal

# If encounters an error
- RuntimeError: Database access not allowed, use the "django_db" mark, or the "db" or "transactional_db" fixtures to enable it.
- mark the class test with '@pytest.mark.django_db' decorator
- import pytest

import pytest

@pytest.mark.django_db
class TestCreatePackage:
    def test_if_user_is_anonymous_returns_401(self):
        client = APIClient()
        response = client.post('/clinic/packages/', {'title': 'a', 'package_type': 'A', 'price': 20000})

        assert response.status_code == status.HTTP_401_UNAUTHORIZED

# Code in pytest.ini

[pytest]
DJANGO_SETTINGS_MODULE = dentalclinic.settings

# To TEST SPECIFIC DIRECTORY/FILE

- pytest clinic/tests/                                          # test all the test case files inside the tests folder
- pytest clinic/tests/test_collection.py                        # test all the class test cases inside the test_collection.py
- pytest clinic/tests/test_collection.py::TestCreatePackage     # test specific class test cases inside the test_collection.py
- pytest clinic/tests/test_collection.py::TestCreatePackage::test_if_user_is_anonymous_returns_401     # test specific function

- pytest -k                 # specify a pattern. k-option
- pytest -k anonymous       # run test with a name pattern 'anonymous'

# -------------------------------------------------

# SKIPPING TEST

- temporarily skip the test cases
- add a skip decorator above the test case function

@pytest.mark.skip
def test_if_user_is_anonymous_returns_401(self):
    ...

# -------------------------------------------------

# CONTINUOUS TESTING

- pipenv install --dev pytest-watch

# Run code

- ptw           # pytest watch


Note: Always test before commiting in github

# -------------------------------------------------

# TEST AUTHENTICATED USER

- use force_authenticate in the client
- client.force_authenticate(user={})

# Test Code

def test_if_user_is_not_admin_returns_403(self):
        client = APIClient()
        client.force_authenticate(user={})
        response = client.post('/clinic/packages/', {'title': 'a', 'package_type': 'A', 'price': 20000})

        assert response.status_code == status.HTTP_403_FORBIDDEN

# -------------------------------------------------

# SINGLE OR MULTIPLE ASSERTIONS

# Note:
- Test cases should have single assertion/responsibility
- Use multiple assertions if logically related

# Scenario
    - The user is authenticated and an admin but the data sent is invalid
    - The user is authenticated and an admin and the data is valid

# Code

- import the user to create a dummy staff user
- client.force_authenticate(user=User(is_staff=True))           # Set the is_staff in User to 'True'

- from django.contrib.auth.models import User

# Scenario 1
    - The user is authenticated and an admin but the data is invalid
    - Multiple assertions (logically related)
    - The title in the response data is Empty/None and returns 400

    def test_if_data_is_invalid_returns_400(self):
            client = APIClient()
            client.force_authenticate(user=User(is_staff=True))
            response = client.post('/clinic/packages/', {'title': '', 'package_type': 'A', 'price': 20000})

            assert response.status_code == status.HTTP_400_BAD_REQUEST
            assert response.data['title'] is not None

# Scenario 2
    - The user is authenticated and an admin and the data is valid
    - The created package has an id greater than 0 and returns 201

    def test_if_data_is_valid_returns_201(self):
        client = APIClient()
        client.force_authenticate(user=User(is_staff=True))
        response = client.post('/clinic/packages/', {'title': 'a', 'package_type': 'A', 'price': 20000})

        assert response.status_code == status.HTTP_201_CREATED
        assert response.data['id'] > 0

# -------------------------------------------------

# FIXTURES

- lesson 38

- removes duplication in the test code
- e.g client = APIClient()                  # remove

- create 'conftest.py'

# In conftest.py            # GLOBAL FIXTURE
    - initialize the APIClient to all test cases        
    - add api_client (name of the function) to the parameters of the test cases. No need to create multiple client
    - def test_if_user_is_anonymous_returns_401(self, api_client):
        ...

     - create a global authentication fixture


    from rest_framework.test import APIClient
    import pytest

    @pytest.fixture
    def api_client():
        return APIClient()

    @pytest.fixture
    def authenticate(api_client):
        def do_authenticate(is_staff=False):
            return api_client.force_authenticate(user=User(is_staff=is_staff))
        return do_authenticate


# CREATING FIXTURE SPECIFIC TO THE MODEL      --- CREATING NEW PACKAGE
    - The concept of this is 'closure' in javascript
    - remove the duplication of creating a post request in the route
    - giving dynamic data in the request

    @pytest.fixture
    def create_package(api_client):
        def do_create_package(package):
            return api_client.post('/clinic/packages/', package)
        return do_create_package

    # WITH GLOBAL API CLIENT FIXTURE

    def test_if_user_is_anonymous_returns_401(self, api_client, create_package):
            response = create_package({'title': 'a', 'package_type': 'A', 'price': 20000})      # New implementation

            assert response.status_code == status.HTTP_401_UNAUTHORIZED

    # WITH GLOBAL AUTHENTICATION FIXTURE

    def test_if_user_is_not_admin_returns_403(self, authenticate, create_package):
        authenticate()
            
        response = create_package({'title': 'a', 'package_type': 'A', 'price': 20000})

        assert response.status_code == status.HTTP_403_FORBIDDEN

    def test_if_data_is_invalid_returns_400(self, authenticate, create_package):
        authenticate(is_staff=True)

        response = create_package({'title': '', 'package_type': 'A', 'price': 20000})

        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert response.data['title'] is not None

# -------------------------------------------------

# CREATING MODEL INSTANCES TEST CASE

- lesson 39

- pipenv install --dev model_bakery

# model_bakery
    - can easily create objects         # e.g Package Model
    - create dummy data of the model

# RETRIEVE THE DATA          --- NO CUSTOM FIELD/SERIALIZER

    @pytest.mark.django_db
    class TestRetrievePackage:
        def test_if_collection_exists_returns_200(self, api_client):
            package = baker.make(Package)
        
            response = api_client.get(f'/clinic/packages/{package.id}/')

            assert response.status_code == status.HTTP_200_OK
            assert response.data == {
                'id': package.id,
                'title': package.title
            }


# CREATE TEST CASES OF THE MODEL WITH CUSTOM SERIALIZER
    - the package model has no price_with_discount field
    - the package model has a custom price_with_discount field in the serializer
    - test and compare the retrieved data to the serializer data

    - import the model and serializer
    - create the package with baker.make()
    - create serializer based on the package
    - get the data
    - compare the data

    from clinic.models import Package
    from clinic.serializers import PackageSerializer

    @pytest.mark.django_db
    class TestRetrievePackage:
        def test_if_collection_exists_returns_200(self, api_client):

            # Arrange
            package = baker.make(Package)

            serializer = PackageSerializer(package)
        
            # Act
            response = api_client.get(f'/clinic/packages/{package.id}/')

            # Assert
            assert response.status_code == status.HTTP_200_OK
            assert response.data == serializer.data

# -------------------------------------------------
